name: CI/CD
on:
  pull_request:
    branches:
      - "*"
    types: [opened, reopened, closed, synchronize]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup
    runs-on: windows-latest
    outputs:
      run-kubernetes-ci: ${{ steps.changes.outputs.pallet == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
      run-workflows-ci: ${{ steps.changes.outputs.workflows == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
      run-terraform-ci: ${{ steps.changes.outputs.terraform == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
      run-solution-ci: ${{ steps.changes.outputs.solution == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
      run-solution-cd: ${{ steps.changes.outputs.solution == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          list-files: json
          filters: |
            pallet:
              - '.pallet/**'
            workflows: 
              - '.github/workflows/**'
              - 'docker-compose.yaml'
              - 'devtools/**'
            terraform:
              - 'infrastructure/terraform/**'
            solution:
              - 'solutions/CN.Shared.JokeService/**' 

  build-and-publish:
    name: "Build and publish"
    needs: setup
    if: needs.setup.outputs.run-solution-ci == 'true'
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref}}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore solutions/CN.Shared.JokeService/JokeService/JokeService.csproj

    - name: Build and Publish BackgroundService
      run: dotnet publish solutions/CN.Shared.JokeService/JokeService/JokeService.csproj -c Release -r win-x64 -p:OutputType=exe -p:PublishSingleFile=true -p:PlatformTarget=x64 --self-contained true

  build-publish-and-create-pr:
    name: "Build, Publish and create PR"
    needs: setup
    if: needs.setup.outputs.run-solution-cd == 'true'
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore solutions/CN.Shared.JokeService/JokeService/JokeService.csproj

    - name: Build and Publish BackgroundService
      run: dotnet publish solutions/CN.Shared.JokeService/JokeService/JokeService.csproj --self-contained true --runtime win-x64 --configuration Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishProtocol=FileSystem -p:PublishDir="bin\Release\net8.0-windows\win-x64\publish"
    - name: Move Installer to Staging
      shell: bash
      run: |
        mkdir -p infrastructure/terraform/scripts/staging
        mv solutions/CN.Shared.JokeService/JokeService/bin/Release/net8.0-windows/win-x64/publish/JokeService.exe infrastructure/terraform/scripts/staging

    - name: Close old autogenerated PRs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        # Fetch all open PRs with titles starting with "Autogenerated"
          pr_list=$(gh pr list --search "Autogenerated - Publish exe to staging in:title" --state open --json number --jq '.[].number')
          
          # Check if there are any PRs
          if [ -z "$pr_list" ]; then
            echo "No open PRs starting with 'Autogenerated' found."
          else
            echo "Found the following PRs to close:"
            echo "$pr_list"
            
            # Loop through and close each PR
            for pr_number in $pr_list; do
              echo "Closing PR #$pr_number"
              gh pr close "$pr_number" -c "Closing outdated autogenerated PR."
            done
          fi

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: auto-pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.merge_commit_sha }}
        base: main
        title: Autogenerated - Publish exe to staging
        body: Files generated by merging ${{ github.event.pull_request.html_url }}
        commit-message: Publish exe

  checks-passed:
    name: Checks passed
    needs:
      - setup
      - build-and-publish
      - build-publish-and-create-pr
    runs-on: ubuntu-latest
    if: always()
    steps:
      - run: exit 1
        name: "Catch errors"
        if: ${{ contains(join(needs.*.result, ','), 'failure') }}